/* Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
*
*  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
*
*  By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
*
*  [MA] 07/12/2021 - Started and finished question 2. I think using the ArrayList is the most friendly way. I could 
*                   have done the check inside of the loop as well. This implementation is probably slower because we iterate 
*                   twice. This can probably be also done using recursion..
*/

import java.util.ArrayList;

class euler2 {
    public static void main(String[] args) {
        Fibonacci();
    }

    public static void Fibonacci() {
        //int limit = 4000000;
        int limit = 4000000;
        int finalNum = 0;
        int firstNum = 1;
        int secondNum = 2;
        int finalSum = 0;
        // 1 2 3 5 8 10 13 21 34 55 89;
        ArrayList<Integer> onlyEvenNumbers = new ArrayList<Integer>();
        //We don't account for the 2 when we add the even numbers. Add it in the beginning an continue
        onlyEvenNumbers.add(secondNum);

        while(finalNum <= limit) {

                finalNum = firstNum + secondNum;
                firstNum = secondNum;
                secondNum = finalNum;

                if(finalNum % 2 == 0) {
                    onlyEvenNumbers.add(finalNum);
                }
        }

        for(int evenNum: onlyEvenNumbers) {
            finalSum += evenNum;
        }

       System.out.println("Sum of even fibonacci sequence less than 4 mill is: " + finalSum);
    }
}